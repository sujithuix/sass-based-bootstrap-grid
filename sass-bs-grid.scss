// ******** VARIABLES
// Media queries breakpoints
// --------------------------------------------------
// Extra small screen / phone
$screen-xs: 480px;
$screen-phone: $screen-xs;
// Small screen / tablet
$screen-sm: 768px;
$screen-tablet: $screen-sm;
// Medium screen / desktop
$screen-md: 992px;
$screen-desktop: $screen-md;
// Large screen / wide desktop
$screen-lg: 1200px;
$screen-lg-desktop: $screen-lg;
// So media queries don't overlap when required, provide a maximum
$screen-xs-max: ($screen-sm - 1);
$screen-sm-max: ($screen-md - 1);
$screen-md-max: ($screen-lg - 1);
//
// Grid system
// --------------------------------------------------
// Number of columns in the grid system
$grid-columns: 12;
// Padding, to be divided by two and applied to the left and right of all columns
$grid-gutter-width: 30px;
// Point at which the navbar stops collapsing
$grid-float-breakpoint: $screen-tablet;
$grid-column-width: 1200px;
// Container sizes
// --------------------------------------------------
// Small screen / tablet
$container-tablet: ((720px + $grid-gutter-width));
// Medium screen / desktop
$container-desktop: ((940px + $grid-gutter-width));
// Large screen / wide desktop
$container-lg-desktop: ((1140px + $grid-gutter-width));
// ******* MIXINS
// Utilities
// -------------------------
// Clearfix
// Source: http://nicolasgallagher.com/micro-clearfix-hack/
//
// For modern browsers
// 1. The space content is one way to avoid an Opera bug when the
// contenteditable attribute is included anywhere else in the document.
// Otherwise it causes space to appear at the top and bottom of elements
// that are clearfixed.
// 2. The use of `table` rather than `block` is only necessary if using
// `:before` to contain the top-margins of child elements.
@mixin clearfix() {
  &:before,
  &:after {
    content: " ";
    /* 1 */
    display: table;
    /* 2 */
  }
  &:after {
    clear: both;
  }
}

@mixin box-sizing($box) {
  -webkit-box-sizing: $box;
  -moz-box-sizing: $box;
  box-sizing: $box;
} // Grid System
// -----------
// Centered container element
@mixin container-fluid($grid-gutter-width:$grid-gutter-width) {
  margin-right: auto;
  margin-left: auto;
  padding-left: ($grid-gutter-width / 2);
  padding-right: ($grid-gutter-width / 2);
  @include clearfix();
}

@mixin container-fixed($contianer-width: $contianer-width) {
  @include breakpoint(md) {
    width: $contianer-width;
  }
  @include breakpoint(lg) {
    width: $contianer-width;
  }
  margin-right: auto;
  margin-left: auto;
  padding-left: ($grid-gutter-width / 2);
  padding-right: ($grid-gutter-width / 2);
  @include clearfix();
} // Creates a wrapper for a series of columns
@mixin make-row($gutter: $grid-gutter-width) {
  margin-left: ($gutter / -2);
  margin-right: ($gutter / -2);
  @include clearfix();
} // Generate the extra small columns
@mixin make-xs-column($columns, $grid-columns : $grid-columns, $gutter: $grid-gutter-width) {
  position: relative;
  float: left;
  width: percentage(($columns / $grid-columns)); // Prevent columns from collapsing when empty
  min-height: 1px; // Inner gutter via padding
  padding-left: ($gutter / 2);
  padding-right: ($gutter / 2);
} // Generate the small columns
@mixin make-sm-column($columns, $grid-columns : $grid-columns, $gutter: $grid-gutter-width) {
  position: relative; // Prevent columns from collapsing when empty
  min-height: 1px; // Inner gutter via padding
  padding-left: ($gutter / 2);
  padding-right: ($gutter / 2); // Calculate width based on number of columns available
  @media (min-width: $screen-sm) {
    float: left;
    width: percentage(($columns / $grid-columns));
  }
} // Generate the small column offsets
@mixin make-sm-column-offset($columns) {
  @media (min-width: $screen-sm) {
    margin-left: percentage(($columns / $grid-columns));
  }
}

@mixin make-sm-column-push($columns) {
  @media (min-width: $screen-sm) {
    left: percentage(($columns / $grid-columns));
  }
}

@mixin make-sm-column-pull($columns) {
  @media (min-width: $screen-sm) {
    right: percentage(($columns / $grid-columns));
  }
} // Generate the medium columns
@mixin make-md-column($columns, $grid-columns : $grid-columns, $gutter: $grid-gutter-width) {
  position: relative; // Prevent columns from collapsing when empty
  min-height: 1px; // Inner gutter via padding
  padding-left: ($gutter / 2);
  padding-right: ($gutter / 2); // Calculate width based on number of columns available
  @media (min-width: $screen-md) {
    float: left;
    width: percentage(($columns / $grid-columns));
  }
} // Generate the large column offsets
@mixin make-md-column-offset($columns) {
  @media (min-width: $screen-md) {
    margin-left: percentage(($columns / $grid-columns));
  }
}

@mixin make-md-column-push($columns) {
  @media (min-width: $screen-md) {
    left: percentage(($columns / $grid-columns));
  }
}

@mixin make-md-column-pull($columns) {
  @media (min-width: $screen-md) {
    right: percentage(($columns / $grid-columns));
  }
} // Generate the large columns
@mixin make-lg-column($columns, $grid-columns : $grid-columns, $gutter: $grid-gutter-width) {
  position: relative; // Prevent columns from collapsing when empty
  min-height: 1px; // Inner gutter via padding
  padding-left: ($gutter / 2);
  padding-right: ($gutter / 2); // Calculate width based on number of columns available
  @media (min-width: $screen-lg) {
    float: left;
    width: percentage(($columns / $grid-columns));
  }
} // Generate the large column offsets
@mixin make-lg-column-offset($columns) {
  @media (min-width: $screen-lg) {
    margin-left: percentage(($columns / $grid-columns));
  }
}

@mixin make-lg-column-push($columns) {
  @media (min-width: $screen-lg) {
    left: percentage(($columns / $grid-columns));
  }
}

@mixin make-lg-column-pull($columns) {
  @media (min-width: $screen-lg) {
    right: percentage(($columns / $grid-columns));
  }
}
